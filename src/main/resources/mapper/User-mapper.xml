<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qbwyyds.community.community.dao.UserMapper">
    <!--><-->
    <!-->字段复印<-->
    <sql id="insertFields">username, password, salt, email, type, status, activation_code, header_url, create_time</sql>
    <sql id="selectFields">id, <include refid="insertFields"></include></sql>
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from User
        where id=#{id};
    </select>
    <!-->#{id}是引用参数<-->
    <select id="selectByUsername" resultType="User">
        select <include refid="selectFields"></include>
        from User
        where username=#{username};
    </select>
    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from User
        where email=#{email};
    </select>
    <!--> 简单的参数类型不用parameterType 复杂的要parameterType
    java中User没有id属性，id是由数据库创建后产生的id 然后返回来放入java User对象中，所以要设置keyProperty<-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values
        (#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>
    <update id="updateStatus">
        update user set status=#{status}
        where
        id=#{id}
    </update>
    <update id="updateHeader">
        update user set header_url=#{headerUrl}
        where
        id=#{id}
    </update>
    <update id="updatePassword">
        update user set password=#{password}
        where
        id=#{id}
    </update>
</mapper>